#!/bin/bash

###############################################################################################
#
# Find files of current folder and its subfolders according to simple naming criteria
#
# USAGE:
#  ff [-print0] [pathstr|/pathstr]*
#
# EXAMPLES:
#  ff .c .h
#    => find the .c or .h files of current folder and its subfolders
#  ff mypathstr
#    => find the files of current folder and its subfolders
#      whose path contains "mypathstr" ("mypathstr" in file or folder names)
#  ff .c .h /mypathstr
#    => find the .c or .h files of current folder and its subfolders
#       whose path does not contain "mypathstr" ("mypathstr" not in file and folder names)
#  ff -print0 .c .h | xargs -0 ls -l
#    => find the .c or .h files of current folder and its subfolders 
#       and allow further processing with xargs -0 (useful for paths containing spaces)
#
#  Examples of searches with regular expressions or special characters:
#  regexp search with *: ff "xxx*yyy"
#  regexp search with ?: ff "xxx?yyy"
#  * in paths: ff "xxx\*yyy"
#  ? in paths: ff "xxx\?yyy"
#  space in paths: ff " xxx "
#  plus in paths: ff "xxx+yyy"
#  parenthesis in paths: ff "(xxx)"
#  tilde in paths: ff "xxx~yyy"
#  pipe in paths: ff "xxx|yyy"
#
###############################################################################################

included_names_list=""
excluded_names_list=""
print0_option=""
for arg in "$@"; do
    file_suffix_str="*"
    if [[ "$arg" == "."* || "$arg" == "/."* ]]; then
        file_suffix_str=""
    fi
    if [[ "$arg" == "-print0" ]]; then
        print0_option="-print0 "
    # path exclusion
    elif [[ $arg == /* ]]; then
        name=$(echo $arg | tail -c +2)
        excluded_names_list="$excluded_names_list! -ipath \"*$name$file_suffix_str\" "
    # path inclusion
    else
        if [[ $included_names_list == "" ]]; then
            included_names_list="$included_names_list-ipath \"*$arg$file_suffix_str\" "
        else
            included_names_list="$included_names_list-o -ipath \"*$arg$file_suffix_str\" "
        fi
    fi
done
if [[ $included_names_list != "" ]]; then
    included_names_list="\( $included_names_list\) "
fi

if [[ "$print0_option" == "" ]]; then
    search_command="find . -type f $included_names_list$excluded_names_list"
    # echo "search_command=$search_command"
    eval $search_command| sed 's|^\./||' | nl -w 1 -s ' ' | sed -E 's/^([0-9]+)/\x1b[33m\1\x1b[0m/'
else
    search_command="find . -type f $included_names_list$excluded_names_list$print0_option"
    # echo "search_command=$search_command"
    eval $search_command
fi

# Notes:
# - -exec option of linux find command is not used because xargs is much faster
# - xargs -0 option is related to find -print0 last option
# Examples:
# find . -type f \( -ipath "*.c" -o -ipath "*.h" \) ! -ipath "*.cpp" ! -ipath "*.hpp" -print0 | xargs -0 ls -l
# is equivalent but much faster than
# find . -type f \( -ipath "*.c" -o -ipath "*.h" \) ! -ipath "*.cpp" ! -ipath "*.hpp" -exec ls -l "{}" \;