#!/bin/bash

###############################################################################################
#
# Find files in current folder and its subfolders according to some simple naming criteria
#
# USAGE:
# ff [-print0] [pathstr|/pathstr]*
#
# EXAMPLES:
#   ff str
#     => list all files whose name or relative path contains str
#   ff .c .h
#     => list all files whose name or relative path contains .c or .h
#   ff .c .h /.cpp /.hpp
#     => list all files whose name or relative path contains .c or .h and not .cpp and not .hpp
#   ff make/
#     => list all files whose relative path contains make/ (pathstr/ includes,
#        /pathstr would exclude)
#   ff -print0 .c .h | xargs -0 ls -l
#     => list all files whose name or relative path contains .c or .h and allow
#        further processing with xargs -0 (useful for paths containing spaces)
#
# Examples with file names or paths containing some special characters:
#   regexp search: ff "*xxx*cpp"
#   star: ff "\*"
#   plus: ff "+" or ff +
#   space: ff " x "
#   parenthesis: ff "(x)"
#   tilde: ff "~"
#   pipe: ff "|"
#
###############################################################################################

included_names_list=""
excluded_names_list=""
print0_option=""
for arg in "$@"; do
  if [[ "$arg" == "-print0" ]]; then
    print0_option="-print0 "
  # path exclusion
  elif [[ $arg == /* ]]; then
    name=$(echo $arg | tail -c +2)
    excluded_names_list="$excluded_names_list! -ipath \"*$name*\" "
  # path inclusion
  else
    if [[ $included_names_list == "" ]]; then
        included_names_list="$included_names_list-ipath \"*$arg*\" "
    else
        included_names_list="$included_names_list-o -ipath \"*$arg*\" "
    fi
  fi
done
if [[ $included_names_list != "" ]]; then
    included_names_list="\( $included_names_list\) "
fi

if [[ "$print0_option" == "" ]]; then
    search_command="find . -type f $included_names_list$excluded_names_list"
    eval $search_command| sed 's|^\./||' | nl -w 1 -s ' ' | sed -E 's/^([0-9]+)/\x1b[33m\1\x1b[0m/'
else
    search_command="find . -type f $included_names_list$excluded_names_list$print0_option"
    eval $search_command
fi

# Notes:
# - -exec option of linux find command is not used because xargs is much faster
# - xargs -0 option is related to find -print0 last option
# Examples:
# find . -type f \( -ipath "*.c*" -o -ipath "*.h*" \) ! -ipath "*.cpp*" ! -ipath "*.hpp*" -print0 | xargs -0 ls -l
# is equivalent but much faster than
# find . -type f \( -ipath "*.c*" -o -ipath "*.h*" \) ! -ipath "*.cpp*" ! -ipath "*.hpp*" -exec ls -l "{}" \;
